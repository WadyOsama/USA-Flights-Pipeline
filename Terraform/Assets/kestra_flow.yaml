id: flights_pipeline
namespace: dezoomcamp.project

inputs:
  - id: dbt_command
    type: SELECT
    allowCustomValue: true
    defaults: dbt build
    values:
      - dbt build
      - dbt debug # use when running the first time to validate DB connection

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
  
tasks:
    
  - id: download_data
    type: io.kestra.plugin.core.http.Download
    uri: https://www.kaggle.com/api/v1/datasets/download/wenxingdi/data-expo-2009-airline-on-time-data

  - id: unzip_file
    type: io.kestra.plugin.compress.ArchiveDecompress
    from: "{{outputs.download_data.uri}}"
    algorithm: ZIP

  - id: loop_over_files
    type: io.kestra.plugin.core.flow.ForEach
    values: "{{outputs.unzip_file.files | jq('to_entries[]')}}"
    tasks:
        - id: upload_to_gsc
          type: io.kestra.plugin.gcp.gcs.Upload
          from: "{{taskrun.value | jq('.value') | first}}"
          to: "gs://{{kv('GCP_BUCKET')}}/flights_data/{{taskrun.value | jq('.key') | first}}"

  - id: create_flights_main_table
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.flights`
      (
        unique_row_id       BYTES   OPTIONS (description = 'A unique identifier for the flight, generated by hashing flight attributes.'),
        FlightDate          Date    OPTIONS (description = 'Date of the flight'),
        Year                INTEGER OPTIONS (description = 'Year of the flight'),
        Month               INTEGER OPTIONS (description = 'Month of the flight'),
        DayofMonth          INTEGER OPTIONS (description = 'Day of month for the flight'),
        DayOfWeek           INTEGER OPTIONS (description = 'Day of week for the flight'),
        DepTime             INTEGER OPTIONS (description = 'Actual departure time (local, hhmm)'),
        CRSDepTime          INTEGER OPTIONS (description = 'Scheduled departure time (local, hhmm)'),
        ArrTime             INTEGER OPTIONS (description = 'Actual arrival time (local, hhmm)'),
        CRSArrTime          INTEGER OPTIONS (description = 'Scheduled arrival time (local, hhmm)'),
        UniqueCarrier       STRING  OPTIONS (description = 'Unique carrier code'),
        FlightNum           INTEGER OPTIONS (description = 'Flight number'),
        TailNum             STRING  OPTIONS (description = 'Plane tail number'),
        ActualElapsedTime   INTEGER OPTIONS (description = 'Actual flight Time (In minutes)'),
        CRSElapsedTime      INTEGER OPTIONS (description = 'Scheduled flight time (In minutes)'),
        AirTime             INTEGER OPTIONS (description = 'Time in the air (In minutes)'),
        ArrDelay            INTEGER OPTIONS (description = 'Arrival delay (In minutes)'),
        DepDelay            INTEGER OPTIONS (description = 'Departure delay (In minutes)'),
        Origin              STRING  OPTIONS (description = 'Origin IATA airport code'),
        Dest                STRING  OPTIONS (description = 'Destination IATA airport code'),
        Distance            INTEGER OPTIONS (description = 'Flight destination (In miles)'),
        TaxiIn              INTEGER OPTIONS (description = 'Taxi in time (In minutes)'),
        TaxiOut             INTEGER OPTIONS (description = 'Taxi out time (In minutes)'),
        Cancelled           BOOLEAN OPTIONS (description = 'Was the flight cancelled?'),
        CancellationCode    STRING  OPTIONS (description = 'Reason for cancellation (a = carrier, b = weather, c = nas, d = security)'),
        Diverted            BOOLEAN OPTIONS (description = 'Was the flight diverted?'),
        CarrierDelay        INTEGER OPTIONS (description = 'Carrier delay (In minutes)'),
        WeatherDelay        INTEGER OPTIONS (description = 'Weather delay (In minutes)'),
        NASDelay            INTEGER OPTIONS (description = 'NAS delay (In minutes)'),
        SecurityDelay       INTEGER OPTIONS (description = 'Security delay (In minutes)'),
        LateAircraftDelay   INTEGER OPTIONS (description = 'Late aircraft delay (In minutes)')
      )
      PARTITION BY FlightDate
      CLUSTER BY Origin, Dest;

  - id: loop_over_years_data
    type: io.kestra.plugin.core.flow.ForEach
    values: "{{range(1987,2008)}}"
    tasks:
      - id: create_flights_external_table
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.flights_ext`
          (
            Year                INTEGER OPTIONS (description = 'Year of the flight'),
            Month               INTEGER OPTIONS (description = 'Month of the flight'),
            DayofMonth          INTEGER OPTIONS (description = 'Day of month for the flight'),
            DayOfWeek           INTEGER OPTIONS (description = 'Day of week for the flight'),
            DepTime             INTEGER OPTIONS (description = 'Actual departure time (local, hhmm)'),
            CRSDepTime          INTEGER OPTIONS (description = 'Scheduled departure time (local, hhmm)'),
            ArrTime             INTEGER OPTIONS (description = 'Actual arrival time (local, hhmm)'),
            CRSArrTime          INTEGER OPTIONS (description = 'Scheduled arrival time (local, hhmm)'),
            UniqueCarrier       STRING  OPTIONS (description = 'Unique carrier code'),
            FlightNum           INTEGER OPTIONS (description = 'Flight number'),
            TailNum             STRING  OPTIONS (description = 'Plane tail number'),
            ActualElapsedTime   INTEGER OPTIONS (description = 'Actual flight Time (In minutes)'),
            CRSElapsedTime      INTEGER OPTIONS (description = 'Scheduled flight time (In minutes)'),
            AirTime             INTEGER OPTIONS (description = 'Time in the air (In minutes)'),
            ArrDelay            INTEGER OPTIONS (description = 'Arrival delay (In minutes)'),
            DepDelay            INTEGER OPTIONS (description = 'Departure delay (In minutes)'),
            Origin              STRING  OPTIONS (description = 'Origin IATA airport code'),
            Dest                STRING  OPTIONS (description = 'Destination IATA airport code'),
            Distance            INTEGER OPTIONS (description = 'Flight destination (In miles)'),
            TaxiIn              INTEGER OPTIONS (description = 'Taxi in time (In minutes)'),
            TaxiOut             INTEGER OPTIONS (description = 'Taxi out time (In minutes)'),
            Cancelled           BOOLEAN OPTIONS (description = 'Was the flight cancelled?'),
            CancellationCode    STRING  OPTIONS (description = 'Reason for cancellation (a = carrier, b = weather, c = nas, d = security)'),
            Diverted            BOOLEAN OPTIONS (description = 'Was the flight diverted?'),
            CarrierDelay        INTEGER OPTIONS (description = 'Carrier delay (In minutes)'),
            WeatherDelay        INTEGER OPTIONS (description = 'Weather delay (In minutes)'),
            NASDelay            INTEGER OPTIONS (description = 'NAS delay (In minutes)'),
            SecurityDelay       INTEGER OPTIONS (description = 'Security delay (In minutes)'),
            LateAircraftDelay   INTEGER OPTIONS (description = 'Late aircraft delay (In minutes)')
          )
          OPTIONS (
            format = 'CSV',
            uris = ['gs://{{kv('GCP_BUCKET')}}/flights_data/{{taskrun.value}}.csv'],
            skip_leading_rows = 1,
            null_marker = NA
          );

      - id: create_flights_staging_table
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.flights_stg`
            AS
            SELECT
              MD5(CONCAT(
                COALESCE(CAST(DATE(Year,Month,DayofMonth) AS STRING), ""),
                COALESCE(CAST(Origin AS STRING), ""),
                COALESCE(CAST(DEST AS STRING), ""),
                COALESCE(CAST(UniqueCarrier AS STRING), ""),
                COALESCE(CAST(FlightNum AS STRING), ""),
                COALESCE(CAST(TailNum AS STRING), "")
              )) AS unique_row_id,
              DATE(Year,Month,DayofMonth) AS FlightDate,
              *
            FROM `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.flights_ext`;
      
      - id: merge_flights_tables
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          MERGE INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.flights` F
            USING (
              SELECT DISTINCT * FROM `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.flights_stg`
            ) S
            ON F.unique_row_id = S.unique_row_id
            WHEN NOT MATCHED THEN
              INSERT (unique_row_id, FlightDate, Year, Month, DayofMonth, DayOfWeek, DepTime, CRSDepTime, ArrTime, CRSArrTime, UniqueCarrier, FlightNum, TailNum, ActualElapsedTime, CRSElapsedTime, AirTime, ArrDelay, DepDelay, Origin, Dest, Distance, TaxiIn, TaxiOut, Cancelled, CancellationCode, Diverted, CarrierDelay, WeatherDelay, NASDelay, SecurityDelay, LateAircraftDelay)
              VALUES (S.unique_row_id, S.FlightDate, S.Year, S.Month, S.DayofMonth, S.DayOfWeek, S.DepTime, S.CRSDepTime, S.ArrTime, S.CRSArrTime, S.UniqueCarrier, S.FlightNum, S.TailNum, S.ActualElapsedTime, S.CRSElapsedTime, S.AirTime, S.ArrDelay, S.DepDelay, S.Origin, S.Dest, S.Distance, S.TaxiIn, S.TaxiOut, S.Cancelled, S.CancellationCode, S.Diverted, S.CarrierDelay, S.WeatherDelay, S.NASDelay, S.SecurityDelay, S.LateAircraftDelay);

  - id: create_planes_main_table
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.planes`
      (
        tailnum        STRING   OPTIONS (description = 'The aircraft registration number, also known as the tail number'),
        type           STRING   OPTIONS (description = 'The category or class of the aircraft (Indicating the ownership type)'),
        manufacturer   STRING   OPTIONS (description = 'The name of the company that produced the aircraft'),
        issue_date     DATE     OPTIONS (description = 'The date when the aircraft airworthiness certificate was issued'),
        model          STRING   OPTIONS (description = 'The specific model designation of the aircraft'),
        status         STRING   OPTIONS (description = 'The current registration status of the aircraft'),
        aircraft_type  STRING   OPTIONS (description = 'The general classification of the aircraft based on its design and function'),
        engine_type    STRING   OPTIONS (description = 'The type of engine(s) installed on the aircraft'),
        year           INTEGER  OPTIONS (description = 'The year the aircraft was manufactured')
      );

  - id: create_planes_external_table
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.planes_ext`
      (
        tailnum        STRING   OPTIONS (description = 'The aircraft registration number, also known as the tail number'),
        type           STRING   OPTIONS (description = 'The category or class of the aircraft (Indicating the ownership type)'),
        manufacturer   STRING   OPTIONS (description = 'The name of the company that produced the aircraft'),
        issue_date     STRING   OPTIONS (description = 'The date when the aircraft airworthiness certificate was issued'),
        model          STRING   OPTIONS (description = 'The specific model designation of the aircraft'),
        status         STRING   OPTIONS (description = 'The current registration status of the aircraft'),
        aircraft_type  STRING   OPTIONS (description = 'The general classification of the aircraft based on its design and function'),
        engine_type    STRING   OPTIONS (description = 'The type of engine(s) installed on the aircraft'),
        year           INTEGER  OPTIONS (description = 'The year the aircraft was manufactured')
      )
      OPTIONS (
        format = 'CSV',
        uris = ['gs://{{kv('GCP_BUCKET')}}/flights_data/plane-data.csv'],
        skip_leading_rows = 1,
        null_marker = None,
        allow_jagged_rows = true,
        field_delimiter = ",",
        ignore_unknown_values = true
      );

  - id: insert_planes_data
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      INSERT INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.planes`
      SELECT 
        tailnum,
        type,
        manufacturer,
        SAFE.PARSE_DATE('%m/%d/%Y', NULLIF(issue_date, '')) AS issue_date,
        model,
        status,
        aircraft_type,
        engine_type,
        year,
      FROM `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.planes_ext`;

  - id: sync_dbt_project
    type: io.kestra.plugin.git.SyncNamespaceFiles
    url: https://github.com/WadyOsama/USA-Flights-Pipeline
    branch: main
    namespace: "{{flow.namespace}}"
    gitDirectory: dbt_usa_flight
    dryRun: false

  - id: dbt-build
    type: io.kestra.plugin.dbt.cli.DbtCLI
    env:
      DBT_DATABASE: "{{kv('GCP_PROJECT_ID')}}"
      DBT_SCHEMA: "{{kv('GCP_DATASET')}}"
    namespaceFiles:
      enabled: true
    containerImage: ghcr.io/kestra-io/dbt-bigquery:latest
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
    inputFiles:
      sa.json: "{{kv('GCP_CREDS')}}"
    commands:
      - dbt deps
      - "{{ inputs.dbt_command }}"
      - dbt docs generate
    storeManifest:
      key: manifest.json
      namespace: "{{ flow.namespace }}"
    profiles: |
      default:
        outputs:
          dev:
            type: bigquery
            dataset: "{{kv('GCP_DATASET')}}"
            project: "{{kv('GCP_PROJECT_ID')}}"
            location: "{{kv('GCP_LOCATION')}}"
            keyfile: sa.json
            method: service-account
            priority: interactive
            threads: 16
            timeout_seconds: 300
            fixed_retries: 1
        target: dev    
